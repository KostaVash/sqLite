

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;
import java.sql.DatabaseMetaData;
import java.sql.Date;


/**
 *
 * @author konstantin vashchenko
 */
public class SqLite {
	static String JDBC_URL="jdbc:sqlite:C:/sqlite/db/";
	static Connection conn = null;
	private  String tableName;
	private  listSql columnName ;
	private static final Scanner s=new Scanner(System.in);
	 

	/**
	 * set the db path
	 * @param fileName
	 */
	public void setUrl(String fileName) {
		JDBC_URL="jdbc:sqlite:C:/sqlite/db/"+fileName+".db";
	}
	/**
	 * Connect to a sample database
	 */
	/**
	 * 

    public static void connect() {

        try {
            // db parameters

            // create a connection to the database
            conn = DriverManager.getConnection(JDBC_URL);

            System.out.println("Connection to SSQLite has been established.");

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }
	 */

	private Connection connect() {
		// SQLite connection string

		Connection conn = null;
		try {
			
			conn = DriverManager.getConnection(JDBC_URL);
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}
		return conn;
	}


	/**
	 * Connect to a sample database
	 *
	 * @param fileName the database file name
	 */

	public  void createNewDatabase() {



		try (Connection conn = this.connect()) {
			if (conn != null) {
				DatabaseMetaData meta = conn.getMetaData();
				System.out.println("The driver name is " + meta.getDriverName());
				System.out.println("A new database has been created.");
			}

		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}
	}
	/**
	 * Create a new table in the database(set by setUrl)
	*
	 */
	 public  void createNewTable(String tableName) {
	        // SQLite connection string
	       this.tableName=tableName;
	        
	        // SQL statement for creating a new table
	        String sql = "CREATE TABLE IF NOT EXISTS "+tableName+" (\n"
	                + "    id integer PRIMARY KEY\n"
	                + ");";
	        
	        try (Connection conn = this.connect();
	                Statement stmt = conn.createStatement()) {
	            // create a new table
	            stmt.execute(sql);
	        } catch (SQLException e) {
	            System.out.println(e.getMessage());
	        }
	        columnName=new listSql();
	  getColumnNames();
	    }
	 
	  

	  

	/**
	 * Create a new column in table
	 * *TODO:to add more data types and size and constraints
	 */
	public void createNewColumn(String name) {
		int checkExsits;
		
		System.out.println("enter a number to choose the data type you want \n "+
				"1 - INT/BIGINT \n"+
				"2 - DOUBLE \n"+""
				+ "3 -DATETIME \n"+""
				+ "4 -CHAR \n"+
				"5 -TEXT	\n"+
				"enter your choose: "
				);
		int i = s.nextInt();
		String type="";
		
		switch(i) {
		case 1: 
			type="BIGINT;";
			break;
		case 2:
			type="DOUBLE;";
			break;
		case 3:
			type="DATETIME;";
			break;
			case 4:
				type="CHAR;";
			break;
			case 5:
				type="TEXT;";
				break;
			
		}
		checkExsits=getString(name,type);
		if(checkExsits==1) {

		
		// SQL statement for creating a new column
		String sql = "ALTER TABLE "+this.tableName+"\n"
				+"ADD COLUMN "+name+" "+type;
		System.out.println(sql);

		try (Connection conn = this.connect();
				Statement stmt = conn.createStatement()) {
			// create a new column
			stmt.execute(sql);
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}
		}
		else {
			System.out.println("this column name already exsits");
		}
	}
	//TODO insert all in 1 row 
	/**
	 * Insert a new row into the table
	 *
	 * @param name
	 * @param capacity
	 */
	public void insert() {
		nodeSql tmp=new nodeSql(columnName.header());
		while(tmp!=null) {
		String sql = "INSERT INTO "+tableName+ " ("+tmp.getColumnName()+") VALUES(?)";
		
		System.out.println(tableName+","+tmp.getColumnName()+","+tmp.getPsKey());
		try (Connection conn = this.connect();
				PreparedStatement pstmt = conn.prepareStatement(sql)) {
			switch(tmp.getPsKey()) {
			case 1:
				System.out.println("Enter your number:");
				int x=s.nextInt();
				pstmt.setInt(1,x);
				break;
			case 2:
				System.out.println("Enter your number:");
				double y=s.nextDouble();
				pstmt.setDouble(1, y);
				break;
			case 3:
				System.out.println("enter the year: ");
				int year=s.nextInt();
				System.out.println("enter the month: ");
				int month=s.nextInt();
				System.out.println("enter the day: ");
				int day=s.nextInt();
				@SuppressWarnings("deprecation") Date date=new Date(year, month, day);
				pstmt.setDate(1,date);
				break;
				case 4:
					System.out.println("enter the CHARACTER: ");
					String str=s.nextLine();
					pstmt.setString(1, str);
				break;
				case 5:
					System.out.println("enter the String: ");
					String strr=s.nextLine();
					pstmt.setString(1, strr);
					break;
			}
			
			pstmt.executeUpdate();}
		 catch (SQLException e) {
			System.out.println(e.getMessage());}
		tmp=tmp.getNext();
	}}
	/**
	 * select ALL from the table
	 */

	public void selectAll(){
		String sql ="SELECT * FROM "+tableName;

		try (Connection conn = this.connect();
				Statement stmt  = conn.createStatement();
				ResultSet rs    = stmt.executeQuery(sql)){

			// Printing the column names
			printColumnNames();
			
			// loop through the result set
			while(rs.next()) {
				
				String resultSetPrint="";
				nodeSql tmp=new nodeSql(columnName.header());
				
				while(tmp != null)
				{
					resultSetPrint+=rs.getString(tmp.getColumnName())+  "\t" ;
					tmp=tmp.getNext();	
				}
				System.out.println(resultSetPrint);
			}
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}


	}
	public void getCapacityGreaterThan(double capacity){
		String sql = "SELECT id, name, capacity "
				+ "FROM warehouses WHERE capacity > ?";

		try (Connection conn = this.connect();
				PreparedStatement pstmt  = conn.prepareStatement(sql)){

			// set the value
			pstmt.setDouble(1,capacity);

			//
			ResultSet rs  = pstmt.executeQuery();

			// loop through the result set
			while (rs.next()) {
				System.out.println(rs.getInt("id") +  "\t" + 
						rs.getString("name") + "\t" +
						rs.getDouble("capacity"));
			}
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}
		

	}
	/**
	 * add the column names from the table and there dataType to columnName
	 */
	private void getColumnNames() {
		String sql="SELECT * FROM "+tableName;
		 
        try (Connection conn = this.connect();
                Statement stmt = conn.createStatement()) {
            
           ResultSet rs= stmt.executeQuery(sql);
           ResultSetMetaData mrs=rs.getMetaData();
           for(int i=1;i<=mrs.getColumnCount();i++) {
        	   columnName.add(mrs.getColumnLabel(i),mrs.getColumnTypeName(i));
        	  
           }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
	}
	/**
	 * check if the name already exsits in the column table
	 * return 1 if added 
	 * retrun 0 if already exsits {
	 */private int getString(String name,String data) {
		 
		if(columnName.isEmpty()) {
			columnName.add(name,data);
			
			return 1;
		}
		else {if(columnName.search(name)) {
			
			return 0;
		}
		else {
			columnName.add(name,data);
			
			return 1;
		}
			
			
				
		}
		
	
	}/*
	*printing columns names
	*/
	 private void printColumnNames() {
	nodeSql tmp=new nodeSql(columnName.header());
			
			while(tmp != null)
			{
				
			System.out.print(tmp.getColumnName()+"\t");
				
				tmp=tmp.getNext();	
			}
			System.out.println("\n");
	 }
	 //TODO:create private method to know which data type i need to use in every function
	 
	 public String toString() {
		 String str=columnName.toString();
			return str;
		}
	 
	public static void main(String[] args) {

		SqLite test=new SqLite();
		test.setUrl("test2");
		test.createNewDatabase();
		test.createNewTable("warehouses");
	//	test.createNewColumn("testtestqa");
		System.out.println(test.toString());
		test.selectAll();
		test.insert();
		//test.connect();
		// test.insert("warehouses","test1 test1", 3000);
		//  test.insert("warehouses","test2 test2", 4000);
		//    test.insert("warehouses","test3 test3", 5000);
		//   test.selectAll();
		//    test.getCapacityGreaterThan(3600);


	}

}
